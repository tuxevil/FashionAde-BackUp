using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Text;
using System.Web.Mvc;
using System.Web.Security;
using ContactProvider;
using FashionAde.Core.Accounts;
using FashionAde.Core.DataInterfaces;
using SharpArch.Web.NHibernate;
using FashionAde.Web.Common;
using FashionAde.ApplicationServices;

namespace FashionAde.Web.Controllers
{
    [HandleError]
    [Authorize]
    public class ContactController : BaseController
    {
        
        private IInviteContactsService inviteContactsService;
        private IContactProvider contactProvider;
        private IFriendProviderRepository friendProviderRepository;

        public ContactController(IFriendProviderRepository friendProviderRepository, IInviteContactsService inviteContactsService)
        {
            this.friendProviderRepository = friendProviderRepository;
            this.inviteContactsService = inviteContactsService;
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ViewResult Index(int? page)
        {
            if (string.IsNullOrEmpty(Request.QueryString["api"]))
                RedirectToAction("Index", "Home");

            contactProvider = ProviderFactory.GetProvider(Request.QueryString["api"]);
            int totalCount;
            IList<IContact> contacts = contactProvider.GetContacts(0, 0, out totalCount);
            ViewData["TotalCount"] = totalCount;
            FriendProvider friendProvider = friendProviderRepository.GetByName(contactProvider.Name);
            ViewData["providerImg"] = friendProvider.ImageUri;
            ViewData["providerName"] = friendProvider.Name;
            ViewData["provider"] = Request.QueryString["api"];
            return View(contacts);
        }

        [Transaction]
        public ActionResult AddContacts(string selectedIndexs, string selectedAll, bool sendemail, string emailmessage, string provider)
        {
            contactProvider = ProviderFactory.GetProvider(provider);
            string[] selected = selectedIndexs.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

            bool all = selectedAll == "true";
            List<int> indexs = new List<int>();
            foreach(string index in selected)
                indexs.Add(Convert.ToInt32(index));
            
            IList<IContact> selectedContacts = new List<IContact>();
            selectedContacts = contactProvider.GetContacts(new Selection(all, indexs));

            FriendProvider fp = friendProviderRepository.GetByName(contactProvider.Name);

            inviteContactsService.InviteUsers(this.ProxyLoggedUser, emailmessage, fp, TransformContacts(selectedContacts));

            return RedirectToAction("Index", "Friend");
        }

        private IList<IBasicUser> TransformContacts(IList<IContact> contacts)
        {
            List<IBasicUser> lst = new List<IBasicUser>(contacts.Count);
            foreach (IContact c in contacts)
                lst.Add(new UserContact() { FirstName = c.FirstName, LastName = c.LastName, EmailAddress = c.Email });
            return lst;
        }
    }
}
