using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using FashionAde.Core;
using FashionAde.Core.Clothing;
using FashionAde.Core.DataInterfaces;
using FashionAde.Core.OutfitEngine;
<<<<<<< .working
using NHibernate;
using NHibernate.Criterion;
=======
using NHibernate;
>>>>>>> .merge-right.r4360
using SharpArch.Data.NHibernate;

namespace FashionAde.Data.Repository
{
    public class PreCombinationRepository : Repository<PreCombination>, IPreCombinationRepository
    {
<<<<<<< .working
        public PreCombination GetByGarments(IList<Garment> garments, FashionFlavor fashionFlavor)
        {
            ICriteria crit = Session.CreateCriteria(typeof(PreCombination));
            for (int i = 0; i < garments.Count; i++)
            {
                // Make sure it is in any position to avoid duplicates.
                Disjunction dis = new Disjunction();
                for (int j = 0; j < garments.Count; j++)
                    dis.Add(Restrictions.Eq(string.Format("Garment{0}", i + 1), garments[j].PreGarment));
                crit.Add(dis);
            }

            PreCombination pc = crit.UniqueResult<PreCombination>();
            return pc;
        }
=======
        public IList<PreCombination> GetFirsts(int maxResults)
        {
            ICriteria crit = Session.CreateCriteria(typeof(PreCombination));
            crit.SetMaxResults(maxResults);
            return crit.List<PreCombination>();
        }
>>>>>>> .merge-right.r4360
    }
}
